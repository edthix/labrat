swagger: "2.0"
info:
  description: "Labrat endpoints"
  version: "1.0.0"
  title: "LABRAT"
  termsOfService: "TODO"
  contact:
    email: "edthix@gmail.com"
  license:
    name: "GPL 3.0"
    url: "https://www.gnu.org/licenses/gpl-3.0.en.html/"
servers:
host: "TODO"
basePath: "/v1"
tags:
- name: "posts"
  description: "Operations about user's posts"
- name: "users"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /users/register:
    post:
      tags:
      - "auth"
      summary: "Register a user"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid user data supplied"
  /users/login:
    get:
      tags:
      - "auth"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /users/logout:
    get:
      tags:
      - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /users:
    get:
      tags:
      - "users"
      summary: "List of users"
      description: "This can only be done by the logged in user."
      operationId: "listUsers"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of users"
        required: true
        schema:
          $ref: "#/definitions/Users"
      responses:
        default:
          description: "successful operation"
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Get user by user id"
      description: "This can only be done by the logged in user."
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "userId that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The userId that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /users/{userId}/assign_role:
    put:
      tags:
      - "users"
      summary: "Assign a role to a user"
      description: "This can only be done by the logged in user with role=admin"
      operationId: "assignRole"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "userId that need to be assigned a role"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object with role"
        required: true
        schema:
          $ref: "#/definitions/UserWithRole"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  /users/{userId}/post_likes:
    get:
      tags:
      - "users"
      summary: "List of posts liked by a User"
      description: "This can only be done by the logged in user"
      operationId: "postLikes"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "userId of the User"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object with role"
          schema:
            $ref: "#/definitions/Posts"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  /posts:
    get:
      tags:
      - "posts"
      summary: "List of posts"
      description: "This can only be done by the logged in user."
      operationId: "listPosts"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of users"
        required: true
        schema:
          $ref: "#/definitions/Posts"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "posts"
      summary: "Create a Post"
      operationId: "createPost"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created post object"
        required: true
        schema:
          $ref: "#/definitions/Post"
      responses:
        "400":
          description: "Invalid post supplied"
        "404":
          description: "Post not found"
  /posts/{postId}:
    get:
      tags:
      - "posts"
      summary: "Get post by post id"
      description: "This can only be done by the logged in post."
      operationId: "getPostById"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Post"
        "400":
          description: "Invalid postname supplied"
        "404":
          description: "Post not found"
    put:
      tags:
      - "posts"
      summary: "Updated post"
      description: "This can only be done by the logged in post."
      operationId: "updatePost"
      produces:

      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        description: "postId that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated post object"
        required: true
        schema:
          $ref: "#/definitions/Post"
      responses:
        "400":
          description: "Invalid post supplied"
        "404":
          description: "Post not found"
    delete:
      tags:
      - "posts"
      summary: "Delete post"
      description: "This can only be done by the logged in post."
      operationId: "deletePost"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        description: "The postId that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid postname supplied"
        "404":
          description: "Post not found"
  /posts/{postId}/user_likes:
    get:
      tags:
      - "posts"
      summary: "List of users who liked this Post"
      description: "This can only be done by the logged in user"
      operationId: "user_likes"
      produces:
      - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "postId of the Post"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/Users"
      responses:
        "400":
          description: "Invalid post supplied"
        "404":
          description: "Post not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  UserBase:
    type: "object"
    required:
      - "email"
      - "full_name"
    properties:
      email:
        type: "string"
        format: "email"
      full_name:
        type: "string"
      description:
        type: "string"
      status:
        type: "string"
        default: "active"
        enum: [
          "active",
          "banned"
        ]
        description: "User status"
  User: {
    allOf: [
      {
        $ref: "#/definitions/UserBase"
      },
      {
        properties: {
          id: {
            type: "integer",
            format: "int64"
          }
        },
        required: [
            "id"
          ]
      }
    ]
  }
  Users:
    type: "array"
    items:
      $ref: '#/definitions/User'
  UserWithRole: {
    description: "A representation of a user with role. Note that `UserWithRole` will be used as the discriminator value.",
    allOf: [
      {
        $ref: "#/definitions/User"
      },
      {
        type: "object",
        properties: {
          role: {
            type: "string",
            description: "Role in the system",
            default: "normal",
            enum: [
              "normal",
              "admin"
            ]
          }
        },
        required: [
            "role"
          ]
      }
    ]
  }
  PostBase:
    type: "object"
    required:
      - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      body:
        type: "string"
      created_by:
        $ref: "#/definitions/User"
  Post:
    allOf: [
      {
        $ref: "#/definitions/PostBase"
      },
      {
        properties: {
          id: {
            type: "integer",
            format: "int64"
          }
        }

      }
    ]
  Posts:
    type: "array"
    items:
      $ref: "#/definitions/Post"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
